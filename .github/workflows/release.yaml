name: Release

on:
  push:
    # tags:
    #   - "v*"

permissions:
  contents: write

jobs:
  release:
    name: Release if we are on a tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the tag
        uses: actions/checkout@v3
      - name: Add toolchain for Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install target for Musl
        run: rustup target add --toolchain stable x86_64-unknown-linux-musl
      - name: Install target for ARM
        run: rustup target add --toolchain stable arm-unknown-linux-gnueabihf
      - name: Restore cached dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Enable ARM cross-build capabilities
        run: sudo dpkg --add-architecture armhf
      - name: Update apt repositories
        run: sudo apt-get update
      - name: Install cross-platform installation dependencies
        run: sudo apt-get install musl-tools gcc-arm-linux-gnueabihf libssl-dev:armhf --no-install-recommends -y
      - name: Add setup for ARM cross-building
        run: |
          export OPENSSL_DIR=/usr/arm-linux-gnueabihf
          export OPENSSL_LIB_DIR=/usr/lib/arm-linux-gnueabihf
          export OPENSSL_INCLUDE_DIR=/usr/include/arm-linux-gnueabihf
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml << EOF
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          rustflags = ["-L/usr/lib/arm-linux-gnueabihf"]
          EOF
      - name: Build for ARM
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target arm-unknown-linux-gnueabihf
      - name: Build for Windows
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-pc-windows-gnu
      - name: Build for Linux
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-unknown-linux-gnu
      - name: Build for Musl
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-unknown-linux-musl
          use-cross: true
      # TODO: Figure out MacOS cross compilation
      # - name: Build for MacOS
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --release --target x86_64-apple-darwin
      #     use-cross: true
    #   - name: Convert binaries into compressed files
    #     run: |
    #       cd target/x86_64-unknown-linux-gnu/release && tar czf gw-bin_x86_64-unknown-linux-gnu.tar.gz gw && cd -
    #       cd target/x86_64-unknown-linux-gnu/release && zip gw-bin_x86_64-unknown-linux-gnu.zip gw && cd -
    #       cd target/x86_64-unknown-linux-musl/release && tar czf gw-bin_x86_64-unknown-linux-musl.tar.gz gw && cd -
    #       cd target/x86_64-unknown-linux-musl/release && zip gw-bin_x86_64-unknown-linux-musl.zip gw && cd -
    #       cd target/x86_64-pc-windows-gnu/release && zip gw-bin_x86_64-pc-windows-gnu.zip gw.exe && cd -
    #   - name: Release on tags
    #     uses: softprops/action-gh-release@v1
    #     with:
    #       files: |
    #         target/x86_64-unknown-linux-gnu/release/gw-bin_x86_64-unknown-linux-gnu.tar.gz
    #         target/x86_64-unknown-linux-gnu/release/gw-bin_x86_64-unknown-linux-gnu.zip
    #         target/x86_64-unknown-linux-musl/release/gw-bin_x86_64-unknown-linux-musl.tar.gz
    #         target/x86_64-unknown-linux-musl/release/gw-bin_x86_64-unknown-linux-musl.zip
    #         target/x86_64-pc-windows-gnu/release/gw-bin_x86_64-pc-windows-gnu.zip
    #   - uses: katyo/publish-crates@v2
    #     with:
    #       registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    #       ignore-unpublished-changes: true